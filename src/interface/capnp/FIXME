- [ ] get rid of dumb MakeServer wrapper, just inline
- [ ] unify readfield forms. can have single ReadDest class with ReadDest::Return typedef, with ReadField taking ReadDest, RestDestArg... arguments and returning ReadDest::Construct(constructor arg, ReadDestArg...) and Return type either being real destination type or a proxy that emplaces into a vector, or a proxy that updates an existing variable
   - could have ReadDest::Update(lambda) where lambda takes reference argument to object, this allows reading & updating for object types that can't be initialized by constructor. e.g. maps, sets, structs without unserializing constructors
   - designgoal is just to have one ReadField per type, not confusing mix of readfieldupdate/emplace and maze of overloads to fall back to one when another isn't available
   - other goal is to support return types. however i think this may be only useful for client side return values. server side value initialization in PassField could potentially use it to get rid of boost::optional, but this relies of type having move / copy constructor, even if it would be elided, and no guarantee of this for paramters
   - call sequence: readfield pair calls readfield a, calls destfirst::construct, calls readfield b, calls destsecond::construct, calls destpair::construct, calls emplace/emplace/back whatever passed to original readfield
   - class ReadDest
     {
         constexpr bool exists; // can be used to overload readfield more optimally, avoid constructing a temporary when assigning to existing objects for types that can be efficiently deserialized by poth construction or update. should always favor constructing unless this is true
         using Return = ...
         Return Construct(...) or using Construct = ...
         Return Update(Callback) { callback(m_ref); or callback(Construct(); }

     }

     Dest::Return ReadField(...Dest...) {
       return Dest::Update([&](obj) { Stream stream; stream >> obj; } )
     }

     Dest::Return ReadField(...Dest...) {
       return Dest::Construct(unserialize, stream); )
     }
- [ ] fix commented out CallWithTupleParams(Make<ClientRead>(proxy_client, response), params.m_values...);
- [ ] fix commented out CallWithTupleParams(Make<ClientBuild>(proxy_client, request), params.m_values...);
- [ ] implement buildfield/readfield for GlobalArgs message type to fix bitcoin-wallet startup error
- [ ] add X.alias or whatever, see ProxyClientCustom<messages::ChainNotifications, Chain::Notifications> FIXME
- [ ] add readfield message type params
- [ ] renames
  - ReadField -> ReadMessage
  - BuildField -> BuildMessage
  - ReaderReader -> MessageInput
  - FieldReader -> FieldInput
  - FieldBuilder -> FieldOutput
  - ListElemBuilder -> ListOutput
  - MakeReader -> MakeMessageInput
  - ReaderTraits -> GetterTraits
  - GetBuilds -> BuilderTraits
  - Param -> LocalType, LocalTypes
  - FUCK -> MessageType, MessageTypes
- [ ] get rid of unnecessary interface *.h includes that could be replaced by forward enum declarations, and forward typedef declarations
- [ ] get rid of g_address_type and g_change_type references from qt
- [ ] capnp/proxy-codegen.cpp: remove "error" "rpcError" special cases
- [ ] capnp/proxy-impl.h: get rid of MainServer unique_ptr hack
- [ ] base.h: move method bodies to base.cpp
- [ ] capnp/proxy-codegen.cpp: return directly from client invoke to remove return variable declarations
- [ ] capnp/init.cpp: add onDisconnect handler in Connect()
- [ ] capnp/proxy-impl.h: FieldReader add can_get static assert or compile check
capnp/proxy-impl.h:601:    typename std::enable_if<!Plain<Reader>::can_get>::type // FIXME: Plain around Reader necessary?
- [ ] capnp/proxy-impl.h: fix std::move in BuildField for optional<> and pointer types, BuildPrimitive for interfaces
- [ ] capnp/proxy-impl.h: fix std::move in ServerField and ServerFieldRet
- [ ] capnp/proxy-impl.h: dedup map/set/vector BuildField
- [ ] capnp/proxy-impl.h: call releaseParams in serverInvoke
- [ ] capnp/proxy.h: rename Impl -> Class everywhere
- [ ] capnp/proxy.h: get rid of proxycallback specializations, move to -impl.h
- [ ] cannp/proxy.h: get rid of horrific buildParams/invokeMethod overloads
- [ ] capnp/proxy.h: clean up functiontraits, pull out Fields crap, get rid of underscores
- [ ] capnp/proxy.h: move out Priority<> class, SetterTraits, ListElemBuilder
- [ ] capnp/proxy.h: get rid of CallMethod
- [ ] capnp/test/capnp_tests.cpp: connect code duplication
old
- [ ] rename -impl to -inl
- [ ] contact https://eklitzke.org/multiprocess-bitcoin
- [ ] link ENABLE_WALLET issue 7965
- [ ] get basic ipc startup work working
  BITCOIND=src/bitcoin-node test/functional/rpcnamedargs.py
- [ ] link to filed gcc bug https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83249
- [ ] get rid of all annotations except count and name
- [ ] add ProxyClient<> ProxyServer<> specializable templates to get rid of server/client interface annotations
  ProxyServer<Interface> : Interface::Server, ProxyServerBase
  ProxyClient<Class> : Class, ProxyClientBase
- [ ] get rid of client/server renaming annotations & figure out whatever specialization substitutions needed to replace
- [ ] get rid of server m_impl generated and move to superclass members
- [ ] get rid of generated std::function support and handle through specialization
- [ ] readConfigFile catch exception
- [ ] executeRpc catch exception
- [ ] capnp forward executeRpc uri
- [ ] remove vpwalelt access executeRpc
- [ ] dedup readfield/buildfield overloads
- [ ] add readfield/buildfield accessor to reduce number of arguments
- [ ] fix ipc branch qt debug window generate command wallet not specified error
  - [ ] remove ENABLE_WALLET vpwallets access from RPCConsole::RPCParseCommandLine
